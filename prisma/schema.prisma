generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                       Int                    @id @default(autoincrement())
  email                    String                 @unique @db.VarChar(255)
  password                 String?                @db.VarChar(255)
  firstName                String?                @db.VarChar(255)
  lastName                 String?                @db.VarChar(255)
  username                 String?                @unique @db.VarChar(255)
  isGoogleAccountConnected Boolean                @default(false)
  picture                  String?                @db.VarChar(255)
  challengeResponses       ChallengeResponse[]
  challengeSetResponses    ChallengeSetResponse[]
  isAdmin                  Boolean                @default(false)
  groups                   GroupsOnUsers[]
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  PasswordResetToken       PasswordResetToken[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
}

model GroupsOnUsers {
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([groupId, userId])
  @@map("GroupOnUsers")
}

model Group {
  id        Int             @id @default(autoincrement())
  name      String          @unique @db.VarChar(255)
  users     GroupsOnUsers[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ChallengeSet {
  id                    Int                    @id @default(autoincrement())
  title                 String                 @default("") @db.VarChar(255)
  instructions          String                 @default("") @db.Text
  imageId               String                 @default("") @db.VarChar(255)
  timeAvailableStart    DateTime?
  timeAvailableEnd      DateTime?
  challenges            Challenge[]
  challengeSetResponses ChallengeSetResponse[]
  isTimed               Boolean                @default(false)
  isScored              Boolean                @default(false)
  completionPoints      Int                    @default(0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

enum ChallengeType {
  OPEN_RESPONSE
  MULTIPLE_CHOICE
  WORDLE
  WORDLE_2023
  SELECT_ELF_NAME
  OFFLINE
  YOUR_ELF_NAME_WORTH
  MATCH
  SANTAS_WORKSHOP
  MULTIPLE_OPEN_RESPONSE
  WIN_LOSE_OR_STOP
  FAMILY_FEUD
  FRAMED
}

model Challenge {
  id                      Int                 @id @default(autoincrement())
  title                   String              @default("") @db.VarChar(255)
  prompt                  String              @default("") @db.Text
  acceptedResponsesIfOpen String[]
  scoreOnSubmit           Boolean             @default(true)
  challengeSet            ChallengeSet?       @relation(fields: [challengeSetId], references: [id])
  challengeSetId          Int?
  parent                  Challenge?          @relation("ParentChildChallenges", fields: [parentId], references: [id])
  parentId                Int?
  children                Challenge[]         @relation("ParentChildChallenges")
  options                 Option[]
  responses               ChallengeResponse[]
  type                    ChallengeType       @default(OPEN_RESPONSE)
  points                  Int                 @default(0)
  bonusPoints             Int                 @default(0)
  matches                 String[]
  matchOptions            String[]
  order                   Int?
  cldImages               CldImage[]
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model Option {
  id          Int       @id @default(autoincrement())
  text        String    @default("") @db.VarChar(255)
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int
  isCorrect   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ResponseSelectElfName {
  id                Int                @id @default(autoincrement())
  selectedFirstName String             @db.VarChar(255)
  selectedLastName  String             @db.VarChar(255)
  ChallengeResponse ChallengeResponse?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model ChallengeResponse {
  id                      Int                    @id @default(autoincrement())
  player                  User                   @relation(fields: [playerId], references: [id])
  playerId                Int
  challenge               Challenge              @relation(fields: [challengeId], references: [id])
  challengeId             Int
  response                String                 @default("") @db.Text
  responseSelectElfName   ResponseSelectElfName? @relation(fields: [responseSelectElfNameId], references: [id])
  responseSelectElfNameId Int?                   @unique
  pointsEarned            Int?
  pointsManuallyAwarded   Int?
  submittedBeforeSetStart Boolean                @default(false)
  submittedAfterSetEnd    Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt

  @@unique([playerId, challengeId])
}

model ChallengeSetResponse {
  id                 Int          @id @default(autoincrement())
  player             User         @relation(fields: [playerId], references: [id])
  playerId           Int
  challengeSet       ChallengeSet @relation(fields: [challengeSetId], references: [id])
  challengeSetId     Int
  startedAt          DateTime?
  completedAt        DateTime?
  clientRecordedTime Int?
  points             Int          @default(0)
  bonusPoints        Int          @default(0)
  timeBonusPoints    Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@unique([playerId, challengeSetId])
}

model CldImage {
  id         Int         @id @default(autoincrement())
  publicId   String      @unique @db.VarChar(255)
  height     Int
  width      Int
  alt        String?
  order      Int?
  challenges Challenge[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
