generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                       Int                    @id @default(autoincrement())
  email                    String                 @unique @db.VarChar(255)
  password                 String?                @db.VarChar(255)
  firstName                String?                @db.VarChar(255)
  lastName                 String?                @db.VarChar(255)
  username                 String?                @unique @db.VarChar(255)
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  isGoogleAccountConnected Boolean                @default(false)
  picture                  String?                @db.VarChar(255)
  challengeResponses       ChallengeResponse[]
  challengeSetResponses    ChallengeSetResponse[]
  isAdmin                  Boolean                @default(false)
  groups                   GroupsOnUsers[]
}

model GroupsOnUsers {
  group   Group   @relation(fields: [groupId], references: [id])
  groupId Int
  user    User    @relation(fields: [userId], references: [id])
  userId  Int
  isAdmin Boolean @default(false)

  @@id([groupId, userId])
  @@map("GroupOnUsers")
}

model Group {
  id        Int             @id @default(autoincrement())
  name      String          @unique @db.VarChar(255)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  users     GroupsOnUsers[]
}

model ChallengeSet {
  id                    Int                    @id @default(autoincrement())
  title                 String                 @default("") @db.VarChar(255)
  instructions          String                 @default("") @db.Text
  imageId               String                 @default("") @db.VarChar(255)
  timeAvailableStart    DateTime?
  timeAvailableEnd      DateTime?
  challenges            Challenge[]
  challengeSetResponses ChallengeSetResponse[]
  isTimed               Boolean                @default(false)
  isScored              Boolean                @default(false)
}

enum ChallengeType {
  OPEN_RESPONSE
  MULTIPLE_CHOICE
  WORDLE
  WORDLE_2023
}

model Challenge {
  id                      Int                 @id @default(autoincrement())
  title                   String              @default("") @db.VarChar(255)
  prompt                  String              @default("") @db.Text
  acceptedResponsesIfOpen String[]
  scoreOnSubmit           Boolean             @default(true)
  challengeSet            ChallengeSet        @relation(fields: [challengeSetId], references: [id])
  challengeSetId          Int
  options                 Option[]
  responses               ChallengeResponse[]
  type                    ChallengeType       @default(OPEN_RESPONSE)
  points                  Int                 @default(0)
}

model Option {
  id          Int       @id @default(autoincrement())
  text        String    @default("") @db.VarChar(255)
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int
  isCorrect   Boolean   @default(false)
}

model ChallengeResponse {
  id                      Int       @id @default(autoincrement())
  player                  User      @relation(fields: [playerId], references: [id])
  playerId                Int
  challenge               Challenge @relation(fields: [challengeId], references: [id])
  challengeId             Int
  response                String    @default("") @db.Text
  pointsEarned            Int?
  pointsManuallyAwarded   Int?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  submittedBeforeSetStart Boolean   @default(false)
  submittedAfterSetEnd    Boolean   @default(false)

  @@unique([playerId, challengeId])
}

model ChallengeSetResponse {
  id                 Int          @id @default(autoincrement())
  player             User         @relation(fields: [playerId], references: [id])
  playerId           Int
  challengeSet       ChallengeSet @relation(fields: [challengeSetId], references: [id])
  challengeSetId     Int
  startedAt          DateTime?
  completedAt        DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  clientRecordedTime Int?
  points             Int          @default(0)

  @@unique([playerId, challengeSetId])
}
